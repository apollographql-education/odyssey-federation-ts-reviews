extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@shareable", "@external"]
  )

type Mutation {
  ### Reviews
  "Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking"
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse!
  "Creates a review for the guest - must be authored by host of past booking"
  submitGuestReview(
    bookingId: ID!
    guestReview: ReviewInput!
  ): SubmitGuestReviewResponse!
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

interface User {
  id: ID!
}

type Host implements User @key(fields: "id") {
  id: ID!
  "The overall calculated rating for a user"
  overallRating: Float
}

type Guest implements User @key(fields: "id", resolvable: false) {
  id: ID!
}

type Listing @key(fields: "id") {
  id: ID!
  "The submitted reviews for this listing"
  reviews: [Review]!
  "The overall calculated rating for a listing"
  overallRating: Float
}

type Booking @key(fields: "id") {
  id: ID!
  "The guest's review of the location"
  locationReview: Review
  "The guest's review about the host"
  hostReview: Review
  "The host's review about the guest"
  guestReview: Review
}

type Review @key(fields: "id") {
  id: ID!
  "Written comment the author has written about the review target"
  text: String!
  "User that wrote the review"
  author: User!
  "The numerical rating for the review target, on a scale of 1-5, with 5 being excellent."
  rating: Float!
}

input ReviewInput {
  text: String!
  rating: Float!
}

type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the host"
  hostReview: Review
  "Newly created review about the location"
  locationReview: Review
}

type SubmitGuestReviewResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the guest"
  guestReview: Review
}
